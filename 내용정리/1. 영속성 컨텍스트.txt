회원 목록 조회 코드
TypedQuery<Member> query = 
	em.createQuery("select m from Member m", Member.class);
List<Member> members = query.getResultList();

엔티티객체 대상 검색 방법.
- JPQL은 엔티티 객체를 대상으로 쿼리한다. (클래스와 필드를 대상으로 함)
- SQL은 데이터베이스 테이블을 대상으로 쿼리한다.

*JPQL은 데이터베이스 테이블을 전혀 알지 못한다. from Member은 엔티티 객체를 말하며 Member 테이블이 아니다

//객체를 생성한 상태 비영속 
Member member = new Member();
member.setId("member1");
member.setUsername("회원1");

//객체를 저장한상태 (영속)
em.persist(member1);

//준영속
em.detach(member1);

//영속성 컨텍스트와 데이터베이스 에서 삭제
em.remove(member1)

Jpa 장점
- 1차캐시 보장
- 동일성 보장
- 트랜잭션을 지원하는 쓰기지연
- 변경 감지
- 지연로딩

em.find() --> 호출시 1차캐시에서 식별자 값으로 엔티티를 찾는다. 쿼리문을 날리지않아 cost 감소 
	** 트랜잭션 단위로 실행되기 때문에 실제 현업에서는 그다지 효과가 없음

em.persist(memberA);
em.persist(memberB); 해당내용 까지 Insert SQL을 데이터베이스에 보내지 않는다

tx.commit() // 커밋하는 순간 데이터베이스에 Insert SQL을 보냄
 --> 데이터를 저장하면 등록 쿼리를 데이터 베이스에 보내지 않고 메모리에 모아 둔다. 그리고 트랜잭션을 커밋할 때 모아둔 등록 쿼리를 데이터 베이스에 한방에 보낸다


Dirty Checking
1. 트랜잭션 커밋하면 엔티티 매니저 내부에 먼저 플러시 호출
2. 엔티티와 스냅샷을 비교하여 변경된 엔티티를 찾는다
3. **변경된 엔티티가 있을시 수정쿼리를 생성하여 쓰기지연sql저장소에 보낸다.
4. 트랜잭션을 커밋한다

Flush
em.persist(a);
em.persist(b);
em.persist(c);

//중간에 jpql실행
query = em.createQuery("Select m from Member m", Member.class);
List<Member> members = query.getResultList();
--> 아직 DB에 값이 없으므로 쿼리결과가 조회되지 않는다. JPA는 이러한 오류를 방지하기위해 JPQL실행시 플러시를 자동으로 호출한다 
	식별자를 기준으로 조회하는 find() 메소드 호출시 플러시가 실행되지 않음!

em.merge(member); //준영속 상태의 엔티티를 영속상태로 변경 시킨다
