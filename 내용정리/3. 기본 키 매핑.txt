기본 키 매핑
- @GeneratedValue(자동생성)
- Identity 데이터베이스 위임 mysql autoincrement
- Sequence : oracle, @SequenceGenerator 필요

IDENTITY전략
데이트베이스에 값을 위임한다
*데이터베이스에 null로 insert쿼리가 날아오면 데이터베이스에서 pk값 할당. 즉 캐시(영속성컨텍스트)에서 값조회가 불가능
em.persist()호출시점에 바로 db에 insert 쿼리를 날려버린다.


SEQUENCE전략
@SequenceGenerator 시퀀스사용

call next value for MEMBER_SEQ
member.id = 1
-- 시퀀스 전략시 DB에서 id값을 가져온다.
-- pk값을 얻고 insert는 날리지안고 영속성 컨텍스트에먼 저장함 즉 버퍼링이 가능
네트워크를 너무 자주왓다갔다하는데 성능상 문제가생기지않을가? (allocationSize)
call next로 가져오면 네트워크를 타기때문에 계속성능문제가생기니 미리 50개사이즈를 db에 올려놓고 하나씩만 가져온다
즉 db에 먼저 올려놓고 메모리에서 그것을 쓰는 방식이다. next call 두번호출 1, 51 그후 mem에서 값가져온다.
웹서버에 동시에 호출해도 문제가 없다. 





Table전략
키생성 전용 테이블을 하나만들어서 데이터베이스 시퀀스를 흉내내는 전략
모든 데이터베이스에 적용가능, 성능 x
테이블 전략에서 init 와 allocationSize전략이 있다.


권장하는 식별자 전략
기본키 제약조건 null, 유일  
**변하면 안된다 : 미래까지 이 조건을 만족하는 자연키는 찾기어렵다. 대리키(대체키)를 사용하자
주민등록번호도 기본 키로 적절하지 않다(저장 x). 수정시 주민번호를pk로 쓰면 주민번호가 fk로 퍼져있기때문에 전부 바꿔줘야함.
* 권장 : Long형 + 대체키(uid) + 키 생성전략 사용


Tip
Long id : intger -> long 거의 영향을 주지않는다. 하지만 Integer은 10억이 넘어갈경우 숫자가
한바퀴 돈다. 10억이 넘어갈때 타입을 바꾸는것이 힘들기 때문에 long사용
JDBC DRIVER : insert쿼리를 넣고 바로 return한다. member.getid()시에 find가 안날라감...
버퍼링에서 가벼운게 크게 메리트있진않는다. 트랜잭션을 잘라내면 성능에 문제가 되지만 한트랜잭션 내부에서 insert쿼리가 여러번 네트워크를
탄다고해서 성능에 크게 문제가없다.
